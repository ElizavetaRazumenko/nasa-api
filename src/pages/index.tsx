import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useEffect, useState } from "react";
import SearchForm from "@/components/searchForm/searchForm";
import getConvertDateInfo from "@/utils/getConvertDateInfo";
import router from "next/router";
import { GetServerSidePropsContext, GetServerSideProps } from "next";
import { API_KEY, BASIC_URL } from "@/constants/constants";
import generateID from "@/utils/generateID";

type ResponseDataKeys = 'copyright' | 'date' | 'explanation' | 'hdurl' | 'media_type' | 'service_version' | 'title' | 'url';

interface PicturesData {
  id: string;
  date: string; 
  url: string;
}

interface HomeProps {
    picturesData: PicturesData[] | null;
    errorMessage?: string;
}

export const getServerSideProps: GetServerSideProps = async (context: GetServerSidePropsContext) => {
  const {
    date,
    start_date,
    end_date,
  } = context.query;

  let endpoint = '';
  if (
    typeof date === 'string'
    || (typeof start_date === 'string' 
        && typeof end_date === 'string')) {
    endpoint = date 
    ? `${BASIC_URL}?date=${date}&api_key=${API_KEY}`
    : `${BASIC_URL}?start_date=${start_date}&end_date=${end_date}&api_key=${API_KEY}`;
    
    try {
      const response = await fetch(endpoint);
      const responseData = await response.json() as (Record<ResponseDataKeys, string> | Record<ResponseDataKeys, string>[]);
  
      if (Array.isArray(responseData)) {
        return {
          props : {
            picturesData: [...responseData.map((data) => ({ 
              id: generateID(), 
              date: data.date, 
              url: data.url}))
            ]
          }
        }
      }  
  
      return { 
        props: {
          picturesData: [{
            id: generateID(),
            date: responseData.date, 
            url: responseData.url
          }]
        }
      }
    } catch (error) {
      if (error instanceof Error) {
        return { 
          props: {
            picturesData: null,
            errorMessage: error.message
          }
        }
      }
    }
  } 

  return {
    props: {
      picturesData: null
    }
  };
}

export default function Home({ picturesData, errorMessage } : HomeProps) {
  const [inputDate, setInputDate] = useState<string | null>(null);

  const setQueryParams = async () => {
    const convertDateInfo = getConvertDateInfo(inputDate);
    router.push(convertDateInfo.start_date ?
      `?start_date=${convertDateInfo.start_date}&end_date=${convertDateInfo.end_date}`
      : `?date=${convertDateInfo.date}`)
  };

  useEffect(() => {
    setQueryParams();
  }, [inputDate]);

  return (
    <>
      <Head>
        <title>Nasa App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${styles.flex_column}`}>
        <h1>Astronomy Picture of the Day</h1>
        <p>
          Select a date (YYYY-MM-DD) or date range (YYYY-MM-DD - YYYY-MM-DD):
        </p>

        <SearchForm setInputDate={setInputDate} />

        <div className={styles.picture_container}>
        {
        picturesData 
        && picturesData.length 
        && picturesData.map((data) => (
            <div key={data.id} className={styles.flex_column}>
              <p>{data.date}</p>
              <img              
                className={styles.picture}
                src={data.url}
                alt="Picture of the Day"
              />
            </div>
          ))
        }
        </div>

        {errorMessage 
        && !picturesData
        && (
        <p className={styles.errorMessage}>{errorMessage}</p>
        ) }

      </main>
    </>
  );
}
